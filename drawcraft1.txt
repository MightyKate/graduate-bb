
Naming Content on the Network Layer: A Security Analysis of the Information-Centric Network Model

1INTRODUCTION

The ubiquitous presence of the Internet points out its great success and emphasizes a future as promising as its past. A large portion of this success comes from the evolution of applications, services, and related technologies over the years, which have been shaping and evolving the way we use the Internet today. However, the Internet core architecture did not show the same evo-lution. Indeed, it has become extremely difficult to sustain the ever-increasing requirements for security, mobility, and availability through patches on protocols. This mismatch between the Inter-net architecture and its current requirments poses a huge motivation to look forward to a better architecture, more dynamic, modular, and adaptive, suitable to accommodate services we experi-ence today and foresee for the future [99].

The Information-Centric Network (ICN) paradigm [25, 53] has gained considerable attention for a future Internet from both academia and industry, precisely by overcoming current Inter-net shortcomings, by shifting the main network entity from hosts to content, thereby requesting and routing named content directly at the network layer. Basically, the ICN model defines content requests using application-layer names directly on the networking layer, as opposed to the cur-rent IP model, in which the networking layer deals with machine addresses. The ICN approach is supposed to rethink the Internet foundations and to design a native ICN environment, embedding features like security, mobility support, and caching.

From the security perspective, the architecture shift imposed by the ICN paradigm on the network-layer changes many aspects related to network security. Naming content instead of ma-chines changes the security paradigm from securing hosts and links to securing content, thus, naming content calls for authenticity and integrity protection mechanisms, to avoid well-known attacks such as spoofing. Moreover, naming content enables the detachment of a content from its location, allowing the deployment of in-network caches and resulting in content being retrieved from anywhere by anyone in the network. Although this brings obvious benefits, it also opens new challenges regarding privacy and access control on in-network cached content.

Furthermore, as routing and forwarding are performed by content names, ICN also raises se-curity questions around monitoring and censorship. It becomes clear that ICN paves the way for potential security threats that are absent on current Internet; however, even known attacks from the Internet could undermine ICN architectures, as they may be emphasized when applied to ICN particularities. Thus, security in ICN should be provided differently from traditional networks. Consequently, security aspects in ICN need special attention, in order to ensure the architecture is robust to bear with current and future Internet requirements, and, more importantly, that the ICN paradigm is considered as a viable technology for content publishers.

This article aims to provide a broad view and insights regarding security threats and their coun-termeasures introduced by naming content directly on the network layer. The main contribution of this text is the systematic organization, classification, and discussion of ICN security issues and their possible solutions. It does not propose new solutions for specific attacks; instead, it discusses possible solutions and provides references to research works that detail them. We expect this ar-ticle will open directions for a better understanding of current issues in ICN security and provide insights about new threats and potential directions for future works.

This study considers aspects of security threats in the three main ICN architectures: (i) Named Data Networking, Content-Centric Networking (NDN/CCN1), (ii) Network of Information (Net-Inf), and (iii) Publish-Subscribe Internet Technology (PURSUIT). The text reflects the amount of research on security in each of these ICN architectures. Since some of them, like NDN/CCN, are far more explored than the others, the amount of work discussed for each architecture is not evenly distributed. In consequence, the solutions discussed in this text are mostly related to the NDN/CCN architecture.

Some other surveys covering security aspects of ICNs were already published [1, 107]. Our text complements and updates them by analyzing, classifying, and organizing a broader number of papers about security in ICN and by giving an insight of current research and perspectives for

1CCN was the original ICN architecture as proposed by Jacobson et al. [54]. NDN is a more recent architecture [127], largely inspired by CCN and initially based on the same code base (formerly called CCNx and recently renamed to NDNx). In this text, we use the acronym NDN/CCN to refer to both architectures, as their characteristics relevant to this survey are equivalent.

future works. We also propose a brand new classification and organization for security attacks in ICN, enabling a new point of view on attacks and countermeasures in the ICN area. For a detailed review of the impact of some specific attacks in ICN architectures and the security requirements they impair, we refer the readers to AbdAllah et al. [1].

The remainder of this article is structured as follows: Section 2 introduces the main entities of an ICN and explains their basic operations (2.1), as well as presents the vulnerabilities and types of attackers we could expect in an ICN architecture (2.2). Then, we discuss threats, attacks, and coun-termeasures on main ICN aspects, structured into three main groups: security in content naming (Section 3), security in routers (Section 4), and security in caching (Section 5). Section 6 discusses challenges and opportunities on ICN security for the effective adoption of ICN architectures, as well as lists future research directions. Section 7 provides final remarks.

2INFORMATION-CENTRIC NETWORKS

Since the Internet inception, we have seen a continuous change in the way we use it. Among the services offered on the Internet, content distribution currently stands out as the most used service. In fact, applications that generate real-time content, such as Netflix and Spotify, represent the category with the highest global monthly traffic, exceeding 50% in North America and with expectations of growing in the next years [99]. However, the Internet shows flaws in efficiently distributing content to respond to the increasing traffic volume, as a legacy from an architecture designed for resource sharing through point-to-point communication. Indeed, solutions to cope with this new content demand were proposed and deployed, such as multicast protocols, peer-to-peer (P2P) networks, and content distribution networks (CDN). However, such solutions are overlays on top of the traditional IP network, inheriting the limitations of such protocol.

The inefficiency of the Internet also extends toward other areas [93]: multiple copies of the same data being transmitted, leading costs to Internet Service Providers (ISPs); no native support for traffic optimization in the IP architecture; network congestion and high dissemination latency; security focus on connections rather than the content; connection-oriented protocols preventing mobility; weak management of energy, as more hardware are needed to perform redundant tasks, and poor end-user delivery performance, especially when it comes to streaming flows. Thus, the perspective of evolving the Internet architecture to one better suited for content distribution con-stitutes the main driving force behind the ICN paradigm. However, not only the shortcomings of Internet Protocol (IP) addressing are driving this change, but also the desire to embed the ar-chitecture with features to provide adaptability, security, mobility, self-organization, and natural evolvability, tackling some current problems and anticipating others.

2.1	The Information-Centric Network Paradigm

Comparing ICN to the IP model, Jacobson et al. [54] highlight two prominent differences: what the network routes and how it routes. In terms of what is being routed, IP routers traditionally route IP packets through the network to a destination machine, while ICN routers are supposed to route requests for a named content toward the best available copy. Thus, IP names machines while ICN names content. To route a request from the user to the destination machine, IP routers are sustained by a routing infrastructure (i.e., autonomous systems), and requests must follow the routing hierarchy toward the destination machine. Besides, network nodes are assisted by Domain Name Service (DNS) servers to translate human-readable names to IP addresses. The ICN paradigm also routes requests toward a content publisher; however, as it provides means of caching content in routers, these can satisfy the user without requiring the request to proceed all the way back to the publisher. In ICN, we observe three main domains that differ from traditional IP networking:

(i)naming, (ii) routing and forwarding, and (iii) caching. In the following, we highlight each of these domains.

â€¢Naming: Since ICN names content items rather than hosts, there is a real concern about scalability. There are many more content items than hosts on the Internet, and the naming scheme is supposed to unambiguously identify all such content. Basically, naming schemes in ICN are divided into two major approaches: flat naming [29] and hierarchical naming [103]. Both have pros and cons: while flat naming allows better naming persistence, as it is not related to any location or organization, it also limits the aggregation of names for routing performance purposes. Hierarchical naming, in contrast, optimizes routing infor-mation aggregation and performance by a name prefix hierarchy, but groups of content that share the same prefix may have to be dealt together by the same location. It is also useful for naming content items in a particular context, facilitating management actions. There is also the attribute-value naming scheme [12], in which a set of attributes representing the capabilities of a content is mapped into a content name. Attribute-value naming schemes have been explored mostly on mobile and Internet of Things environments [90].

â€¢Routing and forwarding: Two main forwarding schemes have being considered in ICN archi-

tectures: name based routing [54] and name-based routing with support of a Name Resolution Service (NRS) [4, 25]. Routers are populated with hierarchical prefixes and corresponding outgoing interface, and store the request state information to forward the content back to the requestor. Using this routing scheme, routers forward content based directly on the con-tent name. In the routing scheme with support of a name resolution service, route discovery acts similarly to the traditional DNS: NRSs map content names to a set of locations; requests are then resolved by the NRS and forwarded by a topology based routing protocol, using the locations retrieved from NRS.

â€¢Caching: three different caching solutions have been proposed to ICN architectures: on-path, off-path, and peer-caching. On-path caching opportunistically explores local content popularity in order to optimize content delivery. It caches content in routers based on the number of content requests passing through them. Off-path caching is performed by dedi-cated servers, very similar to CDNs today and is also sustained by content popularity. Peer-caching is tackled in mobile environments, where usersâ€™ devices can be used as content caches to provide a better content availability to nearby devices. Caching also manages the eviction of content items through cache eviction policies such as Least Recently Used (LRU) and Least Frequently Used (LFU) [125].

To date, various ICN architectures have been proposed, such as NDN/CCN [54, 127], NetInf [25], PURSUIT [33], and Data-Oriented Network Architecture (DONA) [62]. Although these architec-tures share the same basic components (named content, routing by content name, and in-network caching), they have particularities regarding implementations. In this survey, we aim to system-atize the security literature about the ICN core function vulnerabilities; thus, we do not discuss particularities of such architectures. Throughout this article, we refer to ICN principles and re-quirements as the ICN paradigm. The set of ICN instances we call ICN architectures. We thought this clarification would be valid as this distinction is not always clear.

Concerning ICN terminology, the RFC 7927 [64] defines three main terms: a Named Data Object (NDO), or simply a data object, is an addressable piece of information that can be requested from the network; a Publisher is an entity that publishes an NDO to the network (the publisher is not necessarily the NDO creator, it may just host data objects for the real producer); and a Requestor is an entity that issues a request for a named data object to the network. In this text, the terms content and data object are used interchangeably; the term publisher is used to represent both the

Fig. 1. Basic ICN content distribution model.

entity that produces a content (its creator or producer) and the entity that makes it available to the network; the terms requestor and user are considered equivalent; finally, the term source designates a generic entity providing a data object, may it be a publisher or a cache.

Figure 1 depicts a simple example of how content flows in the ICN communication model, using the NDN/CCN architecture as a support for it. First, a publisher makes content available to users, in this example under the prefix /s1/, which became aware of such content by applications or search mechanisms. Users send requests for content items to the network (Figure 1(a)), without specifying a particular machine or address. The routers, based on their routing tables, route the request toward the content publisher, checking their caches for a cache hit. The reply contain-ing the payload follows the reverse path (Figure 1(b)). As the content is forwarded through the routers, they may store a copy in their caches, providing ways to reason bandwidth, link quality, or available connections, by satisfying further requests without routing them all the way back to the publisher, as depicted in Figure 1(c).

2.2	Security Concerns in ICN

Despite the great benefits from adopting the ICN paradigm, the deep change it represents in the network layer invariably leads to new security challenges. For example, it is mandatory for all ICN architectures to provide a name-content integrity check mechanism, enabling users to check whether the retrieved content was tampered with. Furthermore, content authenticity should also be addressed, to provide means of assessing content origin. Content-based routing demands more management information to be handled in each router than IP-based routing, such as the Forward Information Base (FIB) and Pending Interest Table (PIT) structures in NDN/CCN. Since pending requests are stored by each router, they may be susceptible to Denial of Service (DOS) attacks by malicious users flooding them with requests [114] and should be protected. Caching mechanisms introduced by ICN may also be targeted by malicious users, and solutions to avoid well-known attacks as cache pollution and cache snooping need attention, as well as mechanisms to control access to cached content only to authorized users. Privacy is another concern for ICN architectures,

Fig. 2. Classification and organization of security threats and the malicious entities they involve.

as content items are requested by name and may be cached on intermediary routers; malicious en-tities should have no access to privacy-sensitive information through content names. ICN does not use the notion of source address; thus, it is not simple to bind a content to a requester, preserv-ing her privacy. Nevertheless, the content name may reveal enough information to hinder usersâ€™ privacy in some specific scenarios.

Overall, we consider that attacks exploring ICN vulnerabilities may be triggered by any en-tity participating in the network: users, content publishers, routers, and cache custodians. We denominate as malicious any of these entities that aims to explore vulnerabilities in the ICN ar-chitecture to disrupt the network or to jeopardize usersâ€™ and content publishersâ€™ privacy. These malicious entities can manifest either in passive or active ways, depending on their interaction with the network. While passive attacks are difficult to detect, as the malicious entity does not interact with the network, active attacks can be profiled, as the malicious entity interacts with other network entities to issue an attack. Also, we assume that malicious entities can act alone or by colluding with others malicious entities to extend the damage. We also consider malicious entities that may have limited resources to launch attacks, as well as malicious entities that have high computational power available for attacks, such as routers, publishers, and governments.

To better understand how attacks influence the ICN behavior, we divided our analysis into the three main domains: security in content, in routers, and in caching. Figure 2 illustrates each of these domains and their respective classes of attacks, as well as the malicious entities that are most likely able to trigger them. For security in content, we expect attacks eased by the lack of security in content naming, leading to threats on content integrity, privacy, and unauthorized access. For routers security, we tackle attacks aiming to disrupt the network as a result of the ICN model, such as resource exhaustion, publisher unavailability, and route depletion. Finally, security in cache covers attacks to in-network caches as cache snooping, cache pollution, and cache poisoning. Each class of attack can be triggered by different vulnerabilities or security flaws in the ICN model, as detailed in next sections.

In the next sections, we systematically present and organize the main attacks against ICN dis-cussed in the literature, and the countermeasures proposed to thwart them, when applicable. We

specifically target intentional faults introduced by attackers, although ICN architectures are also prone to other faults, like physical and design faults. We also introduce tables containing the com-pilation of ICN attacks and their corresponding category, target, vulnerability, as well as references to papers tackling countermeasures to mitigate them. In such tables, we aim to specify exactly the name of the attacks used by authors in their papers, even though some of them may have identical functioning. We chose to stick with the naming convention used by the authors, to help the read-ers to identify these similarities. These tables are divided into three parts, each one presenting a category of attacks, being placed at the end of the corresponding section. Although distinct ICN architectures [5, 25, 33, 53] have particularities regarding implementations, they share the same basic ICN components (named content, routing by content name, and in-network caching). Thus, we are interested in security issues concerning the core functions of the ICN paradigm, and will not discuss particularities of such architectures.

3	SECURITY IN CONTENT

The content naming scheme is at the core of any ICN architecture and thus is one of the most critical mechanisms to be secured. As important as the protection of the content name is the pro-tection of the content itself. Mainly due to content-location independence introduced by the ICN paradigm, the content is susceptible to threats regarding integrity and authenticity, privacy, and secrecy. Indeed, name and content security has been a main issue for ICN designers, and a great amount of vulnerabilities and solutions have already been studied. In this section, we categorize content naming security issues into three groups: content integrity and authenticity, content pri-vacy, and content secrecy. Content integrity and authenticity threats comprise attacks that aim to modify and tamper legitimate content payload, to cheat the network and the users, or to inject fake content in the network, as if it originated from a real publisher. Content privacy attacks aim to vi-olate usersâ€™ and content publishersâ€™ sensitive information by tampering communication channels (privacy issues due to caching are discussed in Section 5) and may result in censorship and user monitoring. Finally, secrecy issues comprise attacks that aim to give access to cached content items to unauthorized entities. These attacks and their countermeasures are detailed in the following.

3.1	Content Integrity and Authenticity

Because content may be distributed and cached by third-party entities, like routers and mobile devices, rather than just servers controlled by content publishers, it is subject to attacks targeting its integrity and authenticity [50, 97]. Malicious entities may tamper content items, by intercepting them and modifying their payload; they also can forge content and inject it in the network, as if it originated from a real publisher. Such attacks are simple and relatively easy to launch: first, the content name is visible to the network entities; thus, it is relatively easy for malicious entities to target popular content items. Second, because the content may be kept by any network entity, the content publisher has no control over it. However, it is easier for malicious routers to launch these attacks due to their privileged positions in the network. Figure 3 depicts this scenario; while user U2 requests for content /s1/A, router R2 produces and replies with a forged content. This attack is extremely damaging to users because it is expected that they accept content from locations other than the content publisher itself; thus, they are vulnerable to corrupted/suspicious content that does not correspond to the original request.

Concerns about content integrity and authenticity are fundamental for any ICN design and indeed have been considered since the conception of naming schemes by adopting digital sig-natures to provide guarantees on content integrity and provenance [45]. It should be noted that content integrity and authenticity are two closely related issues. Most solutions to content integrity threats also apply to content authenticity issues. In most of ICN architectures, the content itself

Fig. 3. Integrity threat in ICN.

can ensure its integrity and authenticity, thus allowing its location independence. For instance, the NDN/CCN architecture ensures integrity by authenticating the linkage between the content and its name. This is performed by the content publisher, who digitally signs the mapping from the content name to the content [103].

Naming a data object after the cryptographic hash of its content allows checking the objectâ€™s integrity. Thus, upon the reception of a content, the user is able to check its integrity and prove-nance by confronting content hashes and certificates with the content publisher or with support of metadata. This schema is adopted in architectures that use flat naming schemes, like NetInf [24], but can also be applied to hierarchical naming ones, as in NDN/CCN [13, 41]. One should observe that this approach works as long as the cryptographic hash function is trustworthy; a broken hash function in an architecture that uses hash-based name binding would allow one to easily publish distinct contents with the same name. Alternatively, identity-based encryption is also proposed to assess the integrity and authenticity of content items [48, 50, 109, 129], where the content name serves as a public key for the content publisher to validate its authenticity. However, such schemes still need the use of auxiliary tools that allow the verification of content integrity.

As essential as paying attention to content authenticity is addressing publisher authenticity, in which the user is able to identify and trust the content publisher. The user may decide to accept or reject a content based on trust information regarding the content publisher, thus involving trust management mechanisms [123]. As the users are able to assess integrity and authenticity from the content itself, they should also make sure the public key used to sign the content is trusted. Alternatives to traditional public-key infrastructures for content authentication are also proposed in ICN, mainly exploring distributed and decentralized mechanisms such as the use of distributed hash tables (DHT) [117, 118], social graphs [74], and traditional DNS-like mechanisms [75]. Another solution propose splitting public keys into several pieces that are redundantly scattered on the network; users can retrieve them from any entity to verify content integrity [55, 61] or even use edge routers to validate the authenticity of all content entering their networks [60]. Researchers also explored a scheme for authenticate old data by using a bookkeeping service that certificates data signatures anytime [124]. The main challenges in the design of trust management schemes are scalability and revocation of keys and certificates [82], since the keys and certificates can also be stored on uncontrolled caches.

3.2	Content Privacy

One of the main mechanisms of any ICN architecture is the name-based routing, which conse-quently makes content names visible to the network. This is a problem because names may con-tain semantic information about content items, thus hindering privacy practices. Malicious entities could explore this feature to monitor, filter, and block usersâ€™ requests based on content names

Fig. 4. Privacy threat in ICN.

[20]. For example, a malicious entity may use a blacklist with content names to block/delete and then monitor channels (and caches) to match content with the blacklist. As routers are strategi-cally positioned in the network and have access to the network traffic, they are the best candidates to issue such attacks. Figure 4 illustrates U1 attempting against U2 privacy by monitoring the communication channel and learning what U2 is requesting. Alternatively, the malicious entity could simply inspect caches and channels for keywords [10]. Although it is difficult to pinpoint the specific user requesting the content, content monitoring and inspection could deny services or censure sensitive content items. This same tactic can be used for monitoring user requests, in which the malicious user eavesdrops the communication channel to figure out content names and to infer users preferences [2].

From the privacy perspective, the main countermeasure to ensure privacy in ICN is to hide or mask the content requests from network entities [106]. Bloom filters [14] have been extensively explored in ICN for this purpose, since this scheme allows a network entity (e.g., a router) to test whether a particular content name is in the routing table or in the cache, without revealing the content name [16, 79]. Before requesting a content, the user computes the Bloom filter for each sub-component in the hierarchical name. Then, routers perform the longest-prefix matching on the content identifier. As this approach transforms the content identifier in a random string of bits, it helps to prevent blacklist matching and user profiling. Alternatively, homomorphic encryption can also be used to hide requests, at the same time that allows routers and content publishers to check whether the requested content is in their content sets, ensuring that neither content publishers nor third-party elements, such as eavesdroppers, are able to deduce or discover the content the user is requesting [33].

Another approach used to provide privacy to users when requesting content in ICN is by mask-ing the content, using cover files, for example. The idea of such solutions is to create a computa-tional asymmetry for legitimate and malicious users when retrieving a content, avoiding blacklist attacks. Basically, the publisher mixes a legitimate content with a cover content. To retrieve the content, the user needs to gather some side information from the publisher using a secure chan-nel, namely the content hash and the algorithm used to generate the covered content. As content items are retrieved in covered blocks, it requires a huge computational effort from malicious users to uncover the content being requested without prior knowledge of the extra information, while le-gitimate users could easily extract the desired content using the information retrieved in the secure side channel [10]. Another idea for the user wanting privacy in content retrieval is to encapsulate the request with each routerâ€™s public key on a known circuit to the content, in an onion routing overlay. Upon reception, each node on the circuit extracts its encryption layer and forwards the request to the next node. This proceeds until the request reaches the publisher, which will receive it in plain text [26, 101, 108]. Also, a user may encode the content name on requests and have


Fig. 5. Unauthorized access threat in ICN.

perfect secrecy, with the support of content publishers [106]. However, this solution generally impairs the benefits of in-network cache, negatively affecting network and caching performance.

Privacy is also a concern for content publishers due to the possibility of censorship, mainly be-cause the content name may contain the publisher (producer) identification. Although censorship should not be handled by the network itself, the ICN behavior may ease it; thus, it is important to discuss such threats. A set of preventive measures to avoid monitoring and censorship of content publishers is proposed in Acs et al. [2], such as using group signatures, ring signatures, and confirmation signatures, which allow a user to verify whether the signature of the content is valid, but not specifically identifying which publisher has signed it, and thus guaranteeing the content publisherâ€™s anonymity. Another idea is to use ephemeral identities under a reliable, per-manent identity. The permanent identity is trusted by users; from there, different identities may be provided on demand to other content publishers, without revealing which one is signing the content.

3.3	Content Secrecy

The enforcement of access control policies to protect content secrecy in ICN is a great concern, especially due to the in-network caching infrastructure proposed by the ICN paradigm [52, 73]. As the retrieved content is cached along the way by unreliable entities such as routers, mobile devices, or third-party servers as in a CDN-like infrastructure, content publishers face problems to manage and enforce access control to their content. This problem is even more concerning when consid-ering paid or copyrighted content, since cached copies of protected content may be accessed by users that do not have an account/subscription for it. Any user, despite her computational power, can retrieve unauthorized content from caches, since they do not validate access from users before replying. Figure 5 introduces a basic unauthorized access scenario, as U1 retrieves a protected con-tent from router R4 cache, which was previously requested by the legitimate user U2. Restricting the name of the content only to authorized users is not enough, since routing and forwarding in ICN are carried out directly by the name of the content, therefore names can be easily discov-ered. Thus, this type of application requires a more robust and appropriate solution for use in ICN. Although access control problems are intrinsic to the ICN paradigm due to in-network caches, ma-licious entities may also benefit from traditional attacks used to gain access to protected content, such as Sybil attacks [84].

The basic action to maintain content secrecy in ICN is through content encryption, ensuring that only users having a valid key can access it [17, 49, 53, 72, 116, 130]. However, depending on the encryption solution adopted, encrypted content may stumble upon caching versus access control trade-offs, mainly because content encrypted for a specific user using traditional symmetric encryption may not be cacheable to other users, who would not be able to decrypt it [76, 95]. To

circumvent that, special cryptographic mechanisms have being proposed for access control in ICN. Attribute-Based Encryption (ABE), for example, encrypts content for a group of users sharing common attributes, thus users are able to decrypt the content only if their key satisfies access control policies embedded in the ciphertext or in the key itself [52, 69, 70, 92]. In ABE schemes, the cached content can be shared among users in the same group. In the Broadcast Encryption (BE) model, content publishers encrypt the content with a unique symmetric key and distribute that symmetric key encrypted under the broadcast group public key. Each user in the broadcast group can decrypt the symmetric key using her individual private key. In the BE model, cached content can also be shared among users in the same broadcast group [49, 84, 94, 126]. However, if such solutions use the same key to encrypt content for a large group, key leakage may be a problem, as any user with the key can retrieve content, even unauthorized ones [78].

Another cryptographic scheme explored is Proxy Re-Encryption (PRE) [11]. In PRE-based so-lutions, content items are encrypted with a symmetric key. The symmetric key is encrypted with the content publisherâ€™s public key and, to recover the symmetric key, users must retrieve a re-encryption key with the content publisher [119]. A common problem of such solutions is the symmetric key disclosure. Once users have the symmetric key, they can access the cached con-tent, even if they are not authorized. A variation of PRE solution is to encrypt each content with a distinct private key from an asymmetric key pair; thus, content items can be shared by all users through caches, while the content public key, if disclosed, is valid only in conjunction with the cor-responding userâ€™s public key [77]. Different strategies, such as mixing symmetric and asymmetric encryption techniques [49, 76, 104, 126] and building access control frameworks that can be used in conjunction with any encryption-based solution [47, 63], have also been explored in the context of ICN. However, recent research discussed that encryption-based solutions are not sufficient for content secrecy, mainly because it is easy for attackers to infer a content by its popularity, even if they are encrypted [42].

Apart from encryption-based solutions, researchers also proposed alternative infrastructure-based solutions, such as using authorization servers for validating policies [31, 32, 36, 102]. One problem of such solutions is that they often assume that content custodians (e.g., caches) validate access policies before sending the content to users. These assumptions may be hard to ensure on the Internet environment, for some reasons. Access control decisions involve evaluating rules defined on users and contents. For a cache to validate an access request, it needs to evaluate access control rules defined by the content publisher for that content and that user. This means that each cache should be provisioned (and updated) with the access rules for all contents it may store and all users it may serve, which is not scalable. Otherwise, caches may outsource the access decisions to authorization servers that know all rules, thus adding extra latency to every content request. The use of access lists is also considered [15, 44]; however, it is more suitable for controlled environments such as sensor networks at small places rather than the Internet. Another idea is to use levels of access directly on routers, such that routers are able to cache only content items which the publisher authorizes to [71]. Such solution assumes that the router operating system is modified to comply with access rules attached to content items and enforced by the router itself on forwarding and caching process. This implies caches should be able to evaluate and apply the access rules defined by the content publishers, which demands more processing for each request. Furthermore, this also imposes a common access control schema in the entire network for all publishers and caches.

Another face of access control is the use of firewalls considering ICN characteristics to support network administration. This can be used, for example, to enforce local security policies. Firewall rules are implemented in terms of blocking content by name or by publisher. If a certain publisher becomes malicious, rules could be implemented to avoid content from such publisher to reach the

network. Also, content could be checked against keywords for filtering purposes. Furthermore, as each content must be signed by its publisher, the firewall could be configured to ignore content with invalid signatures, for instance [44].

Table 1 presents the compilation of works addressing attacks and countermeasures on content security for ICN.

4SECURITY IN ROUTERS

Routers perform essential services for the core of the network layer, as routing and forwarding. Besides managing and updating all routing information, it takes care of finding content in the network, forwarding requests and content back to the requestor.routing information. As the ICN paradigm brings new features to the network layer, new threats in routers functions also arise, mostly due to forwarding based by names directly in the network layer. However, even known attacks as denial of service may hamper ICN forwarding. We categorize routers attacks in ICN in three groups: resource exhaustion, publisher unavailability, and route depletion. Resource exhaus-tion attacks comprise malicious entities that demand routers unnecessary computations. Publisher unavailability groups attacks targeting content publishers to limit or stop the content distribution. At last, route depletion attacks aim to disrupt routing paths, e.g., by advertising invalid routes. In this section, we detail each of these groups.

4.1	Resource Exhaustion

To be able to forward the content back to the requestor, ICN architectures based on stateful routing, like NDN/CCN, demand routers to keep record of received and forwarded requests per interface, until the request is consumed, either by the content traversing the path back or by timeout expi-ration. This mechanism is pointed out as potentially vulnerable to Denial of Service (DoS) attacks aiming to disrupt forwarding service for legitimate users or to overload the network and disable it. The exploitation of this vulnerability has been extensively addressed in the literature, and can be effectively issued by any user in the network. For example, a malicious user or a set of collud-ing users could explore the stateful nature of routing in ICN by issuing an excessive number of requests, consequently depleting the available memory for pending requests entries and denying

Fig. 6. Resource exhaustion threat in ICN.

service for legitimate users. Whether the router employs a rate limit for pending requests entries is indifferent, as it is simple for malicious users to exceed this limit [112]. However, since requests entries for the same content are aggregated for performance, this attack is ineffective or minimized if the malicious user sends a burst of requests for the same content, even in a distributed way. To disable this natural defense, malicious users should issue an excessive amount of bogus requests in order to fill the pending request table with forged entries, thus causing legitimate requests to be dropped [3, 18, 21, 23, 28, 34, 59, 110, 112]. Such attacks would be much more aggressive and difficult to detect with distributed attackers working simultaneously [43], as depicted in Figure 6. In this example, U1 and U2 together are exhausting resources from router R4, which may not be available to accept any more requests due to the amount of requests in its pending request records.

All these flooding attacks have a common consequence: They cause pending request entries to expire. To avoid this characteristic from being explored in countermeasures for flooding attacks, the user may collude with a malicious content publisher to avoid the detection of excessive requests being expired [65, 111, 114]. In this case, the malicious publisher replies forged requests right before the pending request entry timeout expires, causing the router to believe in a chan-nel congestion. As a consequence, re-transmissions are triggered, amplifying the damage. These attacks can also be explored by two subverted routers slowing down content forwarding, forcing pending request entries in other routers to expire before content delivery is complete, thus causing re-transmissions storms [111].

The first attempts to mitigate flooding attacks in ICN suggest the use of hash functions on pending request tables to save storage or always accepting a new request, dropping the oldest ones [65]. However, these are simple ideas that may delay attack consequences but not avoid them. More sophisticated solutions are based on monitoring and identifying unusual amounts of requests in routers [89]. For example, routers may monitor unsatisfied requests rate [7â€“9, 30, 34, 43, 56, 58, 59], the amount of entries on the pending request table [21], or the amount of requests on each interface [3, 88]. Thus, in case routers identify abnormal amounts of requests for distinct content items in the same interface, they can limit the amount of accepted requests from such interface, possibly minimizing the consequences of flooding while allowing legitimate requests from this interface to have a fair chance of being satisfied. Some solutions allow these results to be shared among routers, thus helping other routers to avoid or to recover from flooding attacks [43, 116].

Interest NACK (non-acknowledgement) packets can also be used to avoid routers to wait for malicious Interests timeout expiration. Using NACKs, routers can satisfy requests in routers, thus freeing PIT from malicious entries, if it is the case [122]. Also, routers may respond to suspicious requests to clean pending requests table on the way back to the malicious user, minimizing the impact of such attacks [23]. Another solution would be to adopt authenticated requests as a mean for routers to identify malicious users who issue an excessive amount of requests [15]. Also,

Fig. 7. Publisher unavailability threat in ICN.

adopting an ICN architecture based on stateless forwarding would decouple malicious entries from PIT [40, 115].

4.2	Publisher Unavailability

Just as sending excessive requests disrupts routing service for legitimate users, concentrating re-quests toward a unique publisher or a specific name space could also disable this entire name space or publisher, such as in the traditional IP network DoS attack. The most basic way of saturating the victim resources and making content unreachable for legitimate users is by sending a large amount of requests for the same content publisher, in which malicious users collude to flood the network with requests toward the same victim server [34, 65], as illustrated in Figure 7. This attack requires a substantial amount of requests toward the same publisher to be effective; how-ever, it does not require a significant amount of computational power from attackers, since the coordination of a group of users could be enough to deploy it.

However, targeting this kind of attack in an ICN infrastructure needs some special preparation by the malicious users. For example, they need to make sure that the content is not satisfied by any cache on the path, as well as that content requests are routed toward the victim and that each request creates new pending request table entries in routers. To subvert such adversities, malicious users could send bogus data requests with the same prefix, inducing the routing mechanism to forward the request toward the prefix publisher, while preventing content to be found in cache [3, 21, 34, 113]. Due to the nature of these attacks, monitoring solutions used to mitigate flooding attacks can also be applied for these cases. Specifically against publisher unavailability attacks, routers could adopt metrics such as monitoring the amount of requests for the same content pub-lishers, and reducing the requests forwarded to this prefix [65], avoiding that malicious requests overwhelm the content publisher.

4.3	Route Depletion

To correctly forward content requests toward publishers or available cached copies, each router needs to maintain its Forwarding Information Base (FIB) updated and free of malicious entries. Threats against FIB could potentially let legitimate domains unreachable or allow malicious users to redirect routes to malicious content or routers for monitoring purposes. This attack demands that attackers have access to route announcements; thus, it requires the subversion of routers or content publishers. Malicious content publishers could announce numerous malicious con-tent belonging to different domains, until the table is full and unable to register valid content from legitimate domains [43]. They could also announce content at a rate extrapolating the route update convergence time, causing problems with incorrect information about cached con-tent, misleading routes, and even opening security gaps for others attacks [111]. Alternatively, a

Fig. 8. Route depletion threat in ICN.

malicious router could announce valid content to the network and when asked for content retrieval, to delay the reply or even do not reply, causing a disruption in services for users [34, 73, 112]. This attack is worsened if several malicious routers collude to announce routes to popular content and then delay replies [111]. Figure 8 depicts a scenario where router R2 announces routes to /S1/ content items, however, instead of forwarding the requests to /S1/, it simple discards re-quests making pending requests in previous routers to expire.

Routing information entries can also be threatened by passive monitoring, since a malicious router can announce routes to many content items, but does not keep all of them in its cache. The goal here is to intercept any request for such content and then forward it to the correct location. As the user is not directly affected by this attack, the attacker can monitor requested content in the network without been noticed [111]. This attack could be more dangerous when considering a collaborative network, such as mobile ad hoc networks, in which user devices are naturally placed as routers to forward packets.

Gasti et al. [34] argue that the NDN/CCN architecture is natively resilient against prefix hi-jacking attacks mainly because routing updates are signed, thus verifiable, preventing malicious users to register fake routes. However, this countermeasure does not apply in face of malicious routers having valid cryptographic keys, accepted and validated by other routers. Furthermore, a network facing such attack could benefit from monitoring for anomalous behavior, similar to solutions applied to request flooding attacks. Also, route hijacking could be subverted by multiple routes toward the victim content, though it would not be effective if attackers collude and attack the publisher in a distributed way [111]. Finally, Lauinger [65] gives some suggestions to prevent the misuse of special bits in request packets, as to limit the use of such bits, like allowing the use of scope field only on local requests, or requiring a digital signature for requests wishing to set the scope field, thus exposing the identification of the attacker.

Table 2 provides a compilation on attacks and countermeasures in ICN routing aspects, together with the vulnerabilities they explore and the targeted entity.

5SECURITY IN CACHING

The caching mechanism is one of the most prominent features of ICN architectures. It aims to improve content distribution in the network, by placing content copies near users; this alleviates congestion and latency problems, specially for popular content, like video streaming. There is a well-known set of threats against cache systems in traditional networks. However, in ICN architec-tures these threats are amplified, as they scale globally to the Internet: malicious network entities (publishers and routers) can announce, update, and distribute malicious content that could be very difficult to detect.

Route interception

Routing misuse

We organize attacks and countermeasures for caching attacks in ICN in three groups: cache snooping, cache pollution, and cache poisoning. Cache snooping attacks comprise malicious users aiming to profile user behavior on the Internet by analyzing content items stored in caches. Cache pollution groups attacks whose goals are to fill caches with unpopular or irrelevant content rather than popular content, making caches ineffective. Finally, cache poisoning differs from previous group by tackling attacks aiming to populate caches with illegal, fake, or forged content. This section lists the attacks that have been explored in literature regarding cache systems for ICN as well as solutions to mitigate them. Since great attention has been given to mitigate caching attacks in ICN, due to the extensive knowledge about caching in traditional networks, there are plentiful solutions.

5.1	Cache Snooping

One of the most interesting cache policies used in ICN is storing content based on content popular-ity and relevance for nearby users. However, this policy makes the cache a relevant representative of information about usersâ€™ interest on the Internet, which can be explored to obtain sensitive information about a user or a group of users [83]. Although these attacks can be launched by users in general as it does not require much computational power, content publishers may better benefit from snooping caches to infer usersâ€™ behavior. Even though it is difficult to pinpoint the behavior of a specific user, content publishers may use snooping to infer preferences for users in a region and use it for advertisement, for example. Also, government agencies may use snooping for

Fig. 9. Cache snooping threat in ICN.

monitoring and blocking specific content. Malicious users closer to victims (e.g., in the same access router) pose an even greater risk for usersâ€™ privacy, as they share the same cache with fewer users, facilitating snoopersâ€™ actions [91]. The snooper is able to list cached content, monitor content access, and even copy conversations [65], as shown in Figure 9, where user U1 snoops into router R4 for content items stored in cache, retrieving a copy of the content previously requested by user U2.

Strategies for cache snooping include cache probing by monitoring a content name and request-ing a specific content name until it is returned by the cache and by requesting random names to the cache, excluding those already obtained in subsequent requests. One particularly worrisome aspect, specific for the NDN/CCN architecture, is the exclude field [53], since it could be used to limit a query specifically to the first cache in the path2; if a content item is retrieved by the snooper from a specific cache, then a user under that cache has recently retrieved that content [65]. These threats are more worrisome when considering on-path caches, since they are traditionally based on routers and represent usersâ€™ behavior with more accuracy. Besides considering malicious en-tities that inspect caches to infer usersâ€™ behavior, privacy invasion attacks [73] also consider malicious content publishers that leak usersâ€™ sensitive information, although this is not a threat exclusive to ICN or under control of ICN architectures.

Another approach to infer whether a given content is in a cache and, consequently, if a nearby user accessed such content recently is through the time difference between replies from nearby caches and from the publisher [16, 86]. A malicious user can issue probes to the cache in order to measure its Round-Trip Time (RTT). Then, it issues a request for the content it aims to monitor and also measures its RTT. By analyzing both RTTs, the malicious user infers whether the content was retrieved from the cache or from anywhere else [65]. This strategy can also be used to infer if a publisher produced some specific content lately by probing the publisher to discover its RTT and then requesting the monitored content. If the RTT from the second request is lower than the first one, it is safe to deduce that such content was recently made available by the publisher for some user and was stored in the cache of some router. Although this attack is feasible and poses a threat against user privacy and anonymity, it is consensus that correlating a specific user with a content in cache is not trivial and may require additional information [2].

Such attacks pose a greater privacy risk if governments or industries make efforts to spy users and disclose their content access privacy and anonymity by monitoring content requests. This is a fundamental concern for ICN architecture, since the network is aware of content items traveling over it. It can be even worse if routers are able to semantically interpret content names, since

2Due to this and other concerns, the exclude field is being removed from the current NDN protocol specification (0.3 at this time) [87].

censorship and monitoring by malicious ISPs, governments, and industries would be much easier. In contrast to deep packet inspection tools in traditional networks, in which the snooper is required to be strategically located and powerful enough to inspect packets at line speed, the cache in ICN architectures allows snoopers to retrieve information on a longer time window [16]. However, correlating users and cached copies is not trivial and may require additional information.

As the first countermeasures to tackle cache snooping attacks in ICN paradigm, a set of possi-ble preventive actions were proposed to alleviate the vulnerabilities in ICN for such attack, such as the restriction of content name parts in which the user could use the exclude field and the longest prefix matching, thus setting which part of the name content the user must have prior knowledge to request it [65, 66]. Also, disabling or limiting the use of the exclude field in request packets could prevent malicious users from restricting their search to local caches, where the threat is amplified. Besides prevention, detection actions like monitoring events such as un-usual requests from the same link in a very short time window at a very high hit rate is also an alternative [91].

In face of timing-based cache snooping, the basic strategy is to delay replies from caches in order to equalize response times, thus avoiding malicious users to infer cached content by timing differences between content retrieved from publishers and caches [16, 65, 85, 86]. Another idea is to count how many times a user requests the same content; a request from the same user is replied directly from the cache and for different users the timing delay is applied, based on the number of hops from the publisher to the user. The use of collaborative caches can be used to undermine timing attacks, since routers cache content items based on internal state, like available storage, and their position in the forwarding path. Thus, it would be much harder for the malicious user to infer whether the retrieved content was in cache or not.

In order to avoid malicious users from snooping content produced by point-to-point conversa-tions, the main idea is to turn content names unpredictable, e.g., by using ephemeral names, by tunneling requests, or by appending a random component to the content name [2]. This random component needs to be agreed between communicating parties. They choose and securely share a secret seed and use it to create and request content. Thus, content name is only known by the two communicating parties, preventing malicious users to probe the cache. Also, hiding content names from the network may help to avoid malicious users from inferring which content items are relevant for users; however, increased privacy comes in detriment of performance [83].

5.2	Cache Pollution

As populating caches in ICN architectures may depend on usersâ€™ access pattern, it also raises the possibility of malicious users to populate the cache with uninteresting content, thus disrupting the performance gain brought by caches. Moreover, all users could potentially serve as caches to the network, as in mobile networks in which all nodes are potentially engaged on routing and forwarding tasks, meaning they have unconditional control over their cached content and cache access. A cache pollution attack [43] is non-intrusive in the sense that malicious usersâ€™ interac-tions appear like normal interactions. For example, malicious users could request a large amount of unpopular content in order to disrupt content locality and degrade cache efficiency [22, 65, 120]. On-path caching is more vulnerable to such attack, since routers have limited memory for caching purposes; if irrelevant content items are cached, more requests for valid content will be forwarded to the content publisher. On the other hand, to pollute off-path caches, the attack has to be ampli-fied by colluding a large amount of users to maximize the amount of requests to unpopular content and fake popular interest. Figure 10 illustrates two users, U1 and U3, colluding to pollute caches be-tween them. In this scenario, U3 requests unpopular content from U1, leaving a cached copy of this uninteresting content on caches of R4 and R3, which may displace a legitimate popular content.

Fig. 10. Cache pollution threat in ICN.

Fig. 11. Cache poisoning threat in ICN.

Monitoring content on caches is the most efficient solution for avoiding cache pollution [57, 121]. For example, the same monitoring mechanisms used for detecting and monitoring other at-tacks may be used to prevent cache pollution, since they already foresee cache monitoring metrics [22, 43, 120]. Specifically, the monitoring of incoming content requests to the same prefix in a short period is especially useful on monitoring cache pollution attacks [121].

5.3	Cache Poisoning

Cache poisoning attacks pose a serious threat to ICN architectures, since their main advantage is easy content production and distribution. A malicious user could populate its cache and satisfy legitimate requests with forged content, which will subsequently be cached along the forwarding path. Moreover, if the content name for a popular content could be anticipated, a malicious user could potentially produce fake content beforehand and collude with others to request this content, in order to spread it along the caches. Then routers with content in cache will deliver the fake content for legitimate requests when the original content becomes available and legitimate users start to request it [30, 34, 38, 73]. However, polluting caches is not trivial, may require additional preparation from attackers, such as subverting the routing system [68], and may require greater computational power, since they should spread fake content toward caches as much as possible. For example, Figure 11 exemplifies the case in which router R2 anticipates the name of a popular content; it produces and distributes the content for inadvertent users while populating caches with the forged content.

Concerning fake content distribution, ICN relies on policies for cache content eviction or explicit exclusion of undesired content by users, which is usually not sufficient to avoid cache poisoning [38]. Having routers to verify all content items signatures before caching them is the natu-ral countermeasure, as it prevents the router to cache fake content. However, this may severely

impact routing performance, as the router would need to check signatures for all incoming con-tent, and a trust mechanism should also be deployed (possibly application-specific). Alternatively, routers may verify signatures only when they are requested to serve content from their caches, preventing fake content to spread into other routers and the users [51]. Also, using information about content excluded from users requests would lead to the same problems: the router would need to authenticate the user to avoid that malicious users deliberately exclude valid content [39, 65]. Another approach to avoid cache poisoning consists in deploying blacklists with illegal con-tent names; routers can then deny their delivery and periodically re-validate cache entries with the content publishers [65]. However, more robust countermeasures seem necessary to effectively avoid fake content on caches.

The basic approach of countermeasures to cache poisoning attacks is to check content prove-nance; for example, routers may accept to cache content items only if the incoming interface matches the outgoing interface in which the request was issued [51]. Assuming that users have means of knowing the content name beforehand, one solution is to include the hash of the static content as an alternative component in a content request [34]. Thereby, upon the reception of such content, the user could be sure the content is the right answer for her request. For dynamic content, the idea is to include the hash of the content publisherâ€™s public key into the request; each intermediate router should check whether the returned content references the same public key. However, in this scenario, malicious users could collude with a malicious content publisher that signs every content with a distinct cryptographic key, forcing the router to ask for every key and consequently delaying content signature checking. Also, the malicious publisher could delay sending the key to the router and choose keys and signatures that require more computational resources to be verified. This scenario leads the router to deny services to legitimate users or even to stop verifying signatures, inducing a momentary security breach.

Routers could stop checking content signatures if the load become too high or, in case of facing a suspicious content publisher, to verify content signatures only when the router has enough free processing power [35, 37, 39]; however, it may lead to an unnecessary performance loss. Alterna-tively, they propose signature checks only if the content is stored long enough in cache [65]. Since in NDN/CCN data packets are signed, DiBenedetto and Papadopoulos [27] propose that end hosts report their routers about the bad data packets they detect. Each router then verifies the packet signature and, if needed, removes it from its cache, forwards the report upstream, and adjusts its forwarding strategies to avoid that contentâ€™s source.

Table 3 lists the last part of security attacks and countermeasures for ICN, grouping attacks in ICN caching mechanisms and their corresponding category, target, vulnerability, as well as countermeasures to mitigate them.

6CHALLENGES AND FUTURE PERSPECTIVES

Effectively securing computing systems in general is not a trivial task [100]. The Internet poses an extra challenge, as its pervasiveness and ubiquitous presence give users the sense of anonymity. As more applications are available on the Internet, more users expose information regarding many facets of their lives, such as credit card numbers, bank accounts, addresses, daily routines, aspects about private life, and so on. With the advent of the Internet of Things [81], it is expected that everything will eventually be connected to the Internet, from appliances to health devices. Thus, the security aspect becomes even more worrying, as sensitive content (e.g., concerning userâ€™s health) requires guarantee that only authorized users can access and modify it.

As stated by AbdAllah et al. [1], ICN security solutions should ensure content integrity and authenticity, certify content provenance, and protect user privacy. Considering also availability and scalability issues, this scope statement is not easy to be fulfilled. While ICN itself is natively

prone, to a certain extent, to some well-known attacks (such as DoS), other important security aspects should be addressed before it can be deployed in real world. In the following, we discuss some ideas we think are important to promote for the evolution of security foundations in ICN:

Old threats in a new architecture: ICN security area would benefit from a deep inspection concerning the feasibility and impact of attacks already known in IP-based networks on ICN architectures, as web page hijacking, traffic interception, and spam, for example. It would be helpful to thoroughly explore these attacks to discover new vulnerabilities and also defenses against them, possibly provided by the ICN paradigm itself.

Security vulnerabilities in mobile environments: Mobile environments pose an extra challenge for security in ICN, since all devices are supposed to serve as content caches, thus raising the potential for cache snooping, monitoring, and censorship. Works address-ing mobile ICN security vulnerabilities and threats are still scarce. There should be more investigation about the impact of the ICN paradigm in a mobile environment, as ICN may be vulnerable to current mobile threats or even introduce new forms of vulnerabilities in mobile networks.

User privacy versus malicious activity detection: Previous cases concerning unautho-rized monitoring and spying on usersâ€™ Internet traffic have raised the level of worry about user privacy and anonymity. In order to be fully considered as an alternative to the current Internet, the ICN architecture must comply with users rights and international rules con-cerning user privacy. It is not easy to reason about implications of such mechanisms, and it is not clear how to simultaneously enable both privacy and malicious activity detection. Moreover, ensuring that governments collect usersâ€™ traffic patterns only for security rea-sons and not for censorship, or preventing misuse of such information to coerce or threat individuals, goes beyond what technology can offer: It requires users behaving properly and citizens vigilance over government activities.

Attack impact assessment: A deep understanding of the potential of attacks in ICN is a con-siderable challenge. We have listed several research works suggesting potential security

problems in ICN; however, only few of them effectively show and analyze the impact of such attacks, in simulations or in a real ICN deployments. Such analysis and discussions are important to really understand which aspects need further study and then correctly orientate the research toward more secure ICN architectures.

Better evaluation of solutions: To date, many solutions proposed in the surveyed literature are not deeply evaluated. More realistic and detailed evaluations are crucial to better un-derstand the behavior of the proposed solutions, including effectiveness, overhead, side effects, and trade-offs [6]. Many testbeds have been developed for ICN architectures [46, 80, 98, 105], and they should be more extensively used to provide better knowledge about ICN security solutions. In particular, solutions that hamper content caching or limit re-quest rates may negatively affect the user experience and should be better investigated [107].

Scalability issues: Many of the security solutions described here directly affect scalability, the raison dâ€™Ãªtre and central feature in ICN architectures. For instance, some solutions use centralized entities for access control enforcement [31, 32, 36, 102] or for key authenticity verification [96]. Scalability should be a foreground property in the assessment of security solutions for attacks in the ICN context.

Fault tolerance: Some of the proposed solutions are based in third-party entities that may constitute a single point of failure [32]. Such entities, besides impacting the system scal-ability, may constitute interesting targets for DoS attacks, impairing the whole network. Some controlled redundancy is expected from solutions to leverage fault tolerance and scalability.

Trust management: The binding between a key and its owner should be ensured by a trust mechanism. ICN does not impose a specific trust management scheme, leaving to ap-plications to define their own mechanisms and sources of trust. Approaches used in the current Internet, like hierarchical Public Key Infrastructures (PKI) can also be adopted in ICN, but more scalable approaches, like SPKI/SDSI [19], fit better to the decentralized nature of ICN, as stated by Zhang et al. [128].

Key revocation: Besides checking the bound between a key and its owner, clients also need to verify whether a given key is yet valid (i.e., it was not revoked). Since a key is a data content, it can be stored in and retrieved from network caches and thus may be outdated if its issuer revoked it. Some approaches were proposed to check the status of keys in ICN [82, 96, 123], but more generic solutions, possibly integrated with trust management schemes, would be welcome.

The ICN paradigm gives researchers the opportunity to embed security into the core of the Internet and to rethink what worked and what has been unsuccessful in the traditional Internet architecture. Nonetheless, securing the network will always be a continuous effort, as new threats appear, new attacks are explored, and new security measures are provided. Starting with robust and consolidated security foundations embedded into the architecture, researchers will be able to provide better and quicker countermeasures, turning the Internet into a safer place.

7	CONCLUDING REMARKS

The ICN paradigm is a promising future Internet architecture that comes to provide an Inter-net more suitable to content distribution. However, from the security perspective, ICN features great challenges. In this article, we organized, classified, discussed, and explored the literature about security vulnerabilities, attacks, and countermeasures in ICN, regarding three key ICN as-pects: content, routers, and caching. We observed that while severe vulnerabilities on content and

content names, such as integrity and privacy, have been extensively addressed, threats against routers and caching still needs attention, especially when they allow fake or corrupted content to reach users. Thus, further research is needed on security solutions and metrics, to leverage ICN as a complete, robust architecture, able to meet current and future demands for performance, mobility, and security. We expect that this knowledge systematization can provide the reader to insights re-garding ICN attacks and vulnerabilities, helping into building future works on discovering points of vulnerabilities and new solutions and countermeasures to mitigate them.

